{"version":3,"sources":["idle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,qBAA4D,eAAe,CAAC,CAAA;AAE5E,2BAAyB,cAAc,CAAC,CAAA;AACxC,0BAAwB,aAAa,CAAC,CAAA;AAGtC,6BAA2B,gBAAgB,CAAC,CAAA;AAM5C,WAAY,UAAU;IAIpB,mDAAQ,CAAA;IAIR,2CAAI,CAAA;IAIJ,iDAAO,CAAA;AACT,CAAC,EAbW,kBAAU,KAAV,kBAAU,QAarB;AAbD,IAAY,UAAU,GAAV,kBAaX,CAAA;AAMD;IAmBE,cAAoB,MAAkB,EAAc,YAA2B;QAA3D,WAAM,GAAN,MAAM,CAAY;QAlB9B,SAAI,GAAW,EAAE,GAAG,EAAE,CAAC;QACvB,eAAU,GAAW,EAAE,CAAC;QACxB,eAAU,GAAe,UAAU,CAAC,IAAI,CAAC;QACzC,eAAU,GAAqB,IAAI,KAAK,CAAC;QACzC,YAAO,GAAY,KAAK,CAAC;QACzB,WAAM,GAAY,KAAK,CAAC;QAIxB,qBAAgB,GAAY,KAAK,CAAC;QAGnC,gBAAW,GAAsB,IAAI,mBAAY,CAAC;QAClD,cAAS,GAAsB,IAAI,mBAAY,CAAC;QAChD,qBAAgB,GAAyB,IAAI,mBAAY,EAAU,CAAC;QACpE,cAAS,GAAyB,IAAI,mBAAY,EAAU,CAAC;QAC7D,gBAAW,GAAsB,IAAI,mBAAY,CAAC;QAGvD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;YACjC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC/B,CAAC;IACH,CAAC;IAMD,kCAAmB,GAAnB,cAAiC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAOhE,kCAAmB,GAAnB,UAAoB,KAAc;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACvB,MAAM,IAAI,KAAK,CACX,gFAAgF,CAAC,CAAC;QACxF,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;IACvC,CAAC;IAMD,yBAAU,GAAV,cAAuB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAOhD,yBAAU,GAAV,UAAW,OAAuB;QAChC,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACtB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;QAC7E,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAMD,sBAAO,GAAP,cAAoB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAOvC,sBAAO,GAAP,UAAQ,OAAe;QACrB,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACtD,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;IAC7B,CAAC;IAMD,4BAAa,GAAb,cAA8B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAEvD,4BAAa,GAAb,UAAc,KAAiB,IAAgB,MAAM,CAAC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC;IAOhF,4BAAa,GAAb,UAAc,OAA+B;QAC3C,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,GAAG,CAAC,CAAe,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,CAAC;YAAtB,IAAI,MAAM,gBAAA;YACb,IAAI,GAAG,GAAG,IAAI,qBAAS,CAAC,MAAM,CAAC,CAAC;YAChC,GAAG,CAAC,SAAS,CAAC,UAAC,IAAmB,IAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAExF,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC3B;QAED,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAMD,4BAAa,GAAb,cAAoC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAK7D,8BAAe,GAAf;QACE,GAAG,CAAC,CAAY,UAAe,EAAf,KAAA,IAAI,CAAC,UAAU,EAAf,cAAe,EAAf,IAAe,CAAC;YAA3B,IAAI,GAAG,SAAA;YACV,GAAG,CAAC,KAAK,EAAE,CAAC;YACZ,GAAG,CAAC,WAAW,EAAE,CAAC;SACnB;QAED,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7B,CAAC;IAMD,wBAAS,GAAT,cAAuB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAM7C,uBAAQ,GAAR,cAAsB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAK3C,oBAAK,GAAL,UAAM,UAAoB;QAA1B,iBAqBC;QApBC,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACrC,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;QAExC,IAAI,OAAO,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;QACrD,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YAChB,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;YACnF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAEpB,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,cAAQ,KAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;IACjF,CAAC;IAKD,mBAAI,GAAJ;QACE,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAE7B,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACrC,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;QAExC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QAErB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAKD,sBAAO,GAAP;QACE,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAE7B,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACrC,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;QAExC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QAEnB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAOD,wBAAS,GAAT,UAAU,KAAe,EAAE,SAAe;QACxC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YAC/C,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAEjC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,CAAC,IAAI;YACrD,CAAC,IAAI,CAAC,UAAU,KAAK,UAAU,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC;IACH,CAAC;IAEO,0BAAW,GAAnB;QAAA,iBAmBC;QAlBC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;QAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5B,IAAI,CAAC,aAAa,EAAE,CAAC;YAErB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;gBACjC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,cAAQ,KAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACxE,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAC5B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1B,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;QAED,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACvC,CAAC;IAEO,+BAAgB,GAAxB,UAAyB,MAAe;QACtC,GAAG,CAAC,CAAkB,UAAe,EAAf,KAAA,IAAI,CAAC,UAAU,EAAf,cAAe,EAAf,IAAe,CAAC;YAAjC,IAAI,SAAS,SAAA;YAChB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,SAAS,CAAC,MAAM,EAAE,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,SAAS,CAAC,KAAK,EAAE,CAAC;YACpB,CAAC;SACF;IACH,CAAC;IAEO,0BAAW,GAAnB;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC3C,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAEO,gCAAiB,GAAzB,UAA0B,UAAkB;QAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACrB,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;QAC1B,CAAC;IACH,CAAC;IAEO,6BAAc,GAAtB;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAC3B,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;IAC5B,CAAC;IAEO,4BAAa,GAArB;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC;IAKD,0BAAW,GAAX;QACE,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IApTH;QAAC,iBAAU,EAAE;mBAoB8B,eAAQ,EAAE;;YApBxC;IAqTb,WAAC;AAAD,CApTA,AAoTC,IAAA;AApTY,YAAI,OAoThB,CAAA","file":"idle.js","sourcesContent":["import {EventEmitter, Injectable, OnDestroy, Optional} from '@angular/core';\n\nimport {IdleExpiry} from './idleexpiry';\nimport {Interrupt} from './interrupt';\nimport {InterruptArgs} from './interruptargs';\nimport {InterruptSource} from './interruptsource';\nimport {KeepaliveSvc} from './keepalivesvc';\n\n\n/*\n * Indicates the desired auto resume behavior.\n */\nexport enum AutoResume {\n  /*\n   * Auto resume functionality will be disabled.\n   */\n  disabled,\n  /*\n   * Can resume automatically even if they are idle.\n   */\n  idle,\n  /*\n   * Can only resume automatically if they are not yet idle.\n   */\n  notIdle\n}\n\n/**\n * A service for detecting and responding to user idleness.\n */\n@Injectable()\nexport class Idle implements OnDestroy {\n  private idle: number = 20 * 60;   // in seconds\n  private timeoutVal: number = 30;  // in seconds\n  private autoResume: AutoResume = AutoResume.idle;\n  private interrupts: Array<Interrupt> = new Array;\n  private running: boolean = false;\n  private idling: boolean = false;\n  private idleHandle: any;\n  private timeoutHandle: any;\n  private countdown: number;\n  private keepaliveEnabled: boolean = false;\n  private keepaliveSvc: KeepaliveSvc;\n\n  public onIdleStart: EventEmitter<any> = new EventEmitter;\n  public onIdleEnd: EventEmitter<any> = new EventEmitter;\n  public onTimeoutWarning: EventEmitter<number> = new EventEmitter<number>();\n  public onTimeout: EventEmitter<number> = new EventEmitter<number>();\n  public onInterrupt: EventEmitter<any> = new EventEmitter;\n\n  constructor(private expiry: IdleExpiry, @Optional() keepaliveSvc?: KeepaliveSvc) {\n    if (keepaliveSvc) {\n      this.keepaliveSvc = keepaliveSvc;\n      this.keepaliveEnabled = true;\n    }\n  }\n\n  /*\n   * Returns whether or not keepalive integration is enabled.\n   * @return True if integration is enabled; otherwise, false.\n   */\n  getKeepaliveEnabled(): boolean { return this.keepaliveEnabled; }\n\n  /*\n   * Sets and returns whether or not keepalive integration is enabled.\n   * @param True if the integration is enabled; otherwise, false.\n   * @return The current value.\n   */\n  setKeepaliveEnabled(value: boolean): boolean {\n    if (!this.keepaliveSvc) {\n      throw new Error(\n          'Cannot enable keepalive integration because no KeepaliveSvc has been provided.');\n    }\n\n    return this.keepaliveEnabled = value;\n  }\n\n  /*\n   * Returns the current timeout value.\n   * @return The timeout value in seconds.\n   */\n  getTimeout(): number { return this.timeoutVal; }\n\n  /*\n   * Sets the timeout value.\n   * @param seconds - The timeout value in seconds. 0 or false to disable timeout feature.\n   * @return The current value. If disabled, the value will be 0.\n   */\n  setTimeout(seconds: number|boolean): number {\n    if (seconds === false) {\n      this.timeoutVal = 0;\n    } else if (typeof seconds === 'number' && seconds >= 0) {\n      this.timeoutVal = seconds;\n    } else {\n      throw new Error('\\'seconds\\' can only be \\'false\\' or a positive number.');\n    }\n\n    return this.timeoutVal;\n  }\n\n  /*\n   * Returns the current idle value.\n   * @return The idle value in seconds.\n   */\n  getIdle(): number { return this.idle; }\n\n  /*\n   * Sets the idle value.\n   * @param seconds - The idle value in seconds.\n   * @return The idle value in seconds.\n   */\n  setIdle(seconds: number): number {\n    if (seconds <= 0) {\n      throw new Error('\\'seconds\\' must be greater zero');\n    }\n\n    return this.idle = seconds;\n  }\n\n  /*\n   * Returns the current autoresume value.\n   * @return The current value.\n   */\n  getAutoResume(): AutoResume { return this.autoResume; }\n\n  setAutoResume(value: AutoResume): AutoResume { return this.autoResume = value; }\n\n  /*\n   * Sets interrupts from the specified sources.\n   * @param sources - Interrupt sources.\n   * @return The resulting interrupts.\n   */\n  setInterrupts(sources: Array<InterruptSource>): Array<Interrupt> {\n    this.clearInterrupts();\n\n    let self = this;\n\n    for (let source of sources) {\n      let sub = new Interrupt(source);\n      sub.subscribe((args: InterruptArgs) => { self.interrupt(args.force, args.innerArgs); });\n\n      this.interrupts.push(sub);\n    }\n\n    return this.interrupts;\n  }\n\n  /*\n   * Returns the current interrupts.\n   * @return The current interrupts.\n   */\n  getInterrupts(): Array<Interrupt> { return this.interrupts; }\n\n  /*\n   * Pauses, unsubscribes, and clears the current interrupt subscriptions.\n   */\n  clearInterrupts(): void {\n    for (let sub of this.interrupts) {\n      sub.pause();\n      sub.unsubscribe();\n    }\n\n    this.interrupts.length = 0;\n  }\n\n  /*\n   * Returns whether or not the service is running i.e. watching for idleness.\n   * @return True if service is watching; otherwise, false.\n   */\n  isRunning(): boolean { return this.running; }\n\n  /*\n   * Returns whether or not the user is considered idle.\n   * @return True if the user is in the idle state; otherwise, false.\n   */\n  isIdling(): boolean { return this.idling; }\n\n  /*\n   * Starts watching for inactivity.\n   */\n  watch(skipExpiry?: boolean): void {\n    this.safeClearInterval('idleHandle');\n    this.safeClearInterval('timeoutHandle');\n\n    let timeout = !this.timeoutVal ? 0 : this.timeoutVal;\n    if (!skipExpiry) {\n      let value = new Date(this.expiry.now().getTime() + ((this.idle + timeout) * 1000));\n      this.expiry.last(value);\n    }\n\n    if (this.idling) {\n      this.toggleState();\n    }\n    if (!this.running) {\n      this.startKeepalive();\n      this.toggleInterrupts(true);\n    }\n\n    this.running = true;\n\n    this.idleHandle = setInterval(() => { this.toggleState(); }, this.idle * 1000);\n  }\n\n  /*\n   * Stops watching for inactivity.\n   */\n  stop(): void {\n    this.stopKeepalive();\n\n    this.toggleInterrupts(false);\n\n    this.safeClearInterval('idleHandle');\n    this.safeClearInterval('timeoutHandle');\n\n    this.idling = false;\n    this.running = false;\n\n    this.expiry.last(null);\n  }\n\n  /*\n   * Forces a timeout event and state.\n   */\n  timeout(): void {\n    this.stopKeepalive();\n\n    this.toggleInterrupts(false);\n\n    this.safeClearInterval('idleHandle');\n    this.safeClearInterval('timeoutHandle');\n\n    this.idling = true;\n    this.running = false;\n    this.countdown = 0;\n\n    this.onTimeout.emit(null);\n  }\n\n  /*\n   * Signals that user activity has occurred.\n   * @param force - Forces watch to be called, unless they are timed out.\n   * @param eventArgs - Optional source event arguments.\n   */\n  interrupt(force?: boolean, eventArgs?: any): void {\n    if (!this.running) {\n      return;\n    }\n\n    if (this.timeoutVal && this.expiry.isExpired()) {\n      this.timeout();\n      return;\n    }\n    this.onInterrupt.emit(eventArgs);\n\n    if (force === true || this.autoResume === AutoResume.idle ||\n        (this.autoResume === AutoResume.notIdle && !this.idling)) {\n      this.watch(force);\n    }\n  }\n\n  private toggleState(): void {\n    this.idling = !this.idling;\n\n    if (this.idling) {\n      this.onIdleStart.emit(null);\n      this.stopKeepalive();\n\n      if (this.timeoutVal > 0) {\n        this.countdown = this.timeoutVal;\n        this.doCountdown();\n        this.timeoutHandle = setInterval(() => { this.doCountdown(); }, 1000);\n      }\n    } else {\n      this.toggleInterrupts(true);\n      this.onIdleEnd.emit(null);\n      this.startKeepalive();\n    }\n\n    this.safeClearInterval('idleHandle');\n  }\n\n  private toggleInterrupts(resume: boolean): void {\n    for (let interrupt of this.interrupts) {\n      if (resume) {\n        interrupt.resume();\n      } else {\n        interrupt.pause();\n      }\n    }\n  }\n\n  private doCountdown(): void {\n    if (!this.idling) {\n      return;\n    }\n\n    if (this.countdown <= 0) {\n      this.timeout();\n      return;\n    }\n\n    this.onTimeoutWarning.emit(this.countdown);\n    this.countdown--;\n  }\n\n  private safeClearInterval(handleName: string): void {\n    if (this[handleName]) {\n      clearInterval(this[handleName]);\n      this[handleName] = null;\n    }\n  }\n\n  private startKeepalive(): void {\n    if (!this.keepaliveSvc || !this.keepaliveEnabled) {\n      return;\n    }\n\n    if (this.running) {\n      this.keepaliveSvc.ping();\n    }\n\n    this.keepaliveSvc.start();\n  }\n\n  private stopKeepalive(): void {\n    if (!this.keepaliveSvc || !this.keepaliveEnabled) {\n      return;\n    }\n\n    this.keepaliveSvc.stop();\n  }\n\n  /*\n   * Called by Angular when destroying the instance.\n   */\n  ngOnDestroy(): void {\n    this.stop();\n    this.clearInterrupts();\n  }\n}\n"],"sourceRoot":"/source/"}